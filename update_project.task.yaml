name: Add Samples to VarSeq Cohort 
auto_generate_session_for_account: "{workspaceBot}"
description: |-
  # Add Samples to Variant Cohort 
  
  This task updates an existing VarSeq cohort project by adding new sample files.
  It automatically finds the most recent project version, creates a new timestamped
  project, imports the new files, downloads required sources, and executes saved
  exports. If no existing project is found, it creates a new one from the template.

agent_requirements:
  cpu_cores: 8
  memory_gb: 16

parameters:
  - name: project_base_path
    type: string
    label: The Project Base Path
    help: The base path where the project will be created and stored

  - name: project_name
    type: string
    label: The Project Base Name 
    help: The base name for the new project. The final project name will include a timestamp to ensure uniqueness.

  - name: files_to_add
    type: directory
    label: The input directory of the new files to add
    help: The directory containing the files to be added to the cohort

  - name: project_template
    type: file
    label: The project template for new projects 
    help: The path to the project template file that will be used for new projects


steps:
  - name: create_cohort
    description: Create the initial cohort
    type: cmd
    docker:
      image: ${VSPIPELINE_DOCKER_IMAGE}
    args:
      - |-
        #!/usr/bin/env bash
        set -xe


        # Find the latest version of the project 
        echo "Searching for the latest project version in $project_base_path"

        export GOLDENHELIX_USERDATA="${WORKSPACE_DIR}/AppData"
        export GH_CRASH_DUMP_DIR="${WORKSPACE_DIR}/${project_base_path}/gh_crash_dump"
        mkdir -p "${GH_CRASH_DUMP_DIR}"

        if [ -d "/scratch" ]; then
          export GH_TEMPDIR="/scratch"
        fi

        # Find all unique folders containing .vsproject files, sorted by creation date
        newest_project=$(find "${WORKSPACE_DIR}${project_base_path}" -name "*.vsproject" -type f -printf '%h\n' | \
                        sort -u | \
                        while read dir; do 
                            # Use birth time if available, otherwise fall back to modification time
                            birth_time=$(stat -c %W "$dir" 2>/dev/null)
                            if [[ "$birth_time" == "0" ]]; then
                                # Birth time not available, use modification time
                                echo "$(stat -c %Y "$dir") $dir"
                            else
                                echo "$birth_time $dir"
                            fi
                        done | \
                        sort -nr | \
                        head -1 | \
                        cut -d' ' -f2-)

        new_project="${WORKSPACE_DIR}${project_base_path}/${project_name}-$(date +%Y%m%d%H%M%S)"

        # Check if we found any results
        echo "Newest project found: $newest_project"
        if [[ -z "$newest_project" ]]; then
            echo "No folders containing .vsproject files found"
            echo "A new project will be created"

            if [[ ! -f "${project_template}" ]]; then
              echo "Project template file not found: $project_template"             
              exit 1
            fi

        cat <<EOF > run_batch.vs-batch
          get_version
          get_license_info
          project_create "${new_project}"  "${project_template}"  
          import "${files_to_add}" 
          download_required_sources 
          task_wait continue_on_error=True 
          run_saved_exports 
          get_task_list 
          project_save 
          project_close
        EOF

        else
          echo "Newest folder: $newest_project"

        cat <<EOF > run_batch.vs-batch
          get_version
          get_license_info
          project_open "${newest_project}" 
          import "${files_to_add}" "${new_project}" 
          download_required_sources 
          task_wait continue_on_error=True 
          run_saved_exports 
          get_task_list 
          project_save
          project_close
        EOF

        fi

        /opt/vspipeline/vspipeline.bin -c batch file=run_batch.vs-batch








